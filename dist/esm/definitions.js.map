{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface UsbDevice {\r\n  deviceId: number;\r\n  vendorId: number;\r\n  productId: number;\r\n  deviceName: string;\r\n  manufacturerName?: string;\r\n  serialNumber?: string;\r\n}\r\n\r\nexport interface UsbSerialOptions {\r\n  baudRate?: number;\r\n  dataBits?: number;\r\n  stopBits?: number;\r\n  parity?: 'none' | 'odd' | 'even' | 'mark' | 'space';\r\n  dtr?: boolean;\r\n  rts?: boolean;\r\n}\r\n\r\nexport interface DataReceivedEvent {\r\n  data: string;\r\n  hexData: string;\r\n  timestamp: number;\r\n  deviceId: number;\r\n}\r\n\r\nexport interface DeviceAttachedEvent {\r\n  deviceId: number;\r\n  vendorId: number;\r\n  productId: number;\r\n  deviceName: string;\r\n  manufacturerName?: string;\r\n  serialNumber?: string;\r\n}\r\n\r\nexport interface DeviceDetachedEvent {\r\n  deviceId: number;\r\n}\r\n\r\nexport interface ErrorEvent {\r\n  message: string;\r\n}\r\n\r\nexport interface UsbSerialPlugin {\r\n  /**\r\n   * Request permission to access USB devices\r\n   */\r\n  requestPermission(options?: { deviceId?: number }): Promise<{ granted: boolean }>;\r\n\r\n  /**\r\n   * List all connected USB devices\r\n   */\r\n  listDevices(): Promise<{ devices: UsbDevice[] }>;\r\n\r\n  /**\r\n   * Connect to a USB device\r\n   */\r\n  connect(options: {\r\n    deviceId: number;\r\n    serialOptions?: UsbSerialOptions;\r\n  }): Promise<{ connected: boolean }>;\r\n\r\n  /**\r\n   * Disconnect from the current device\r\n   */\r\n  disconnect(): Promise<{ disconnected: boolean }>;\r\n\r\n  /**\r\n   * Write data to the serial port\r\n   */\r\n  write(options: { data: string }): Promise<{ bytesWritten: number }>;\r\n\r\n  /**\r\n   * Read data from the serial port\r\n   */\r\n  read(): Promise<{ data: string }>;\r\n\r\n  /**\r\n   * Start listening for data\r\n   */\r\n  startListening(): Promise<void>;\r\n\r\n  /**\r\n   * Stop listening for data\r\n   */\r\n  stopListening(): Promise<void>;\r\n\r\n  /**\r\n   * Add listener for data received events\r\n   */\r\n  addListener(\r\n    eventName: 'dataReceived',\r\n    listenerFunc: (event: DataReceivedEvent) => void\r\n  ): Promise<{ remove: () => void }>;\r\n\r\n  /**\r\n   * Add listener for connection state changes\r\n   */\r\n  addListener(\r\n    eventName: 'connectionStateChanged',\r\n    listenerFunc: (event: { connected: boolean; deviceId?: number }) => void\r\n  ): Promise<{ remove: () => void }>;\r\n\r\n  /**\r\n   * Add listener for device attached events\r\n   */\r\n  addListener(\r\n    eventName: 'deviceAttached',\r\n    listenerFunc: (event: DeviceAttachedEvent) => void\r\n  ): Promise<{ remove: () => void }>;\r\n\r\n  /**\r\n   * Add listener for device detached events\r\n   */\r\n  addListener(\r\n    eventName: 'deviceDetached',\r\n    listenerFunc: (event: DeviceDetachedEvent) => void\r\n  ): Promise<{ remove: () => void }>;\r\n\r\n  /**\r\n   * Add listener for error events\r\n   */\r\n  addListener(\r\n    eventName: 'error',\r\n    listenerFunc: (event: ErrorEvent) => void\r\n  ): Promise<{ remove: () => void }>;\r\n}"]}