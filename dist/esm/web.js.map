{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\nimport type { UsbSerialPlugin, UsbDevice, DataReceivedEvent, DeviceAttachedEvent, DeviceDetachedEvent, ErrorEvent } from './definitions';\r\n\r\nexport class UsbSerialWeb extends WebPlugin implements UsbSerialPlugin {\r\n  private port: any = null;\r\n  private reader: any = null;\r\n  private writer: any = null;\r\n  private listening = false;\r\n  private availablePorts: any[] = [];\r\n  private connected = false;\r\n\r\n  constructor() {\r\n    super();\r\n    this.checkWebSerialSupport();\r\n    this.setupSerialPortListeners();\r\n  }\r\n\r\n  private checkWebSerialSupport(): void {\r\n    if (!('serial' in navigator)) {\r\n      console.error('Web Serial API not supported in this browser');\r\n      this.notifyError('Web Serial API not supported. Please use Chrome/Edge 89+ or enable experimental web platform features.');\r\n    }\r\n  }\r\n\r\n  async requestPermission(options?: { deviceId?: number }): Promise<{ granted: boolean }> {\r\n    if (!('serial' in navigator)) {\r\n      throw new Error('Web Serial API not supported');\r\n    }\r\n    \r\n    try {\r\n      // If deviceId is provided, try to use existing port\r\n      if (options?.deviceId !== undefined) {\r\n        const ports = await (navigator as any).serial.getPorts();\r\n        if (ports[options.deviceId]) {\r\n          this.port = ports[options.deviceId];\r\n          return { granted: true };\r\n        }\r\n      }\r\n      \r\n      // Request new port with ESP32 filter\r\n      const requestOptions = {\r\n        filters: [\r\n          { usbVendorId: 0x10C4 }, // Silicon Labs CP210x\r\n          { usbVendorId: 0x1A86 }, // QinHeng Electronics CH340\r\n          { usbVendorId: 0x0403 }, // FTDI\r\n          { usbVendorId: 0x303A }, // Espressif (ESP32)\r\n        ]\r\n      };\r\n      \r\n      this.port = await (navigator as any).serial.requestPort(requestOptions);\r\n      return { granted: true };\r\n    } catch (e) {\r\n      const errorMsg = 'Permission denied: ' + (e as Error).message;\r\n      console.error(errorMsg);\r\n      this.notifyError(errorMsg);\r\n      return { granted: false };\r\n    }\r\n  }\r\n\r\n  async listDevices(): Promise<{ devices: UsbDevice[] }> {\r\n    if (!('serial' in navigator)) {\r\n      throw new Error('Web Serial API not supported');\r\n    }\r\n    \r\n    try {\r\n      const ports = await (navigator as any).serial.getPorts();\r\n      this.availablePorts = ports;\r\n      \r\n      const devices: UsbDevice[] = await Promise.all(\r\n        ports.map(async (port: any, index: number) => {\r\n          const info = port.getInfo ? port.getInfo() : {};\r\n          return {\r\n            deviceId: index,\r\n            vendorId: info.usbVendorId || 0,\r\n            productId: info.usbProductId || 0,\r\n            deviceName: this.getDeviceName(info.usbVendorId, info.usbProductId, index),\r\n            manufacturerName: info.manufacturerName,\r\n            serialNumber: info.serialNumber,\r\n          };\r\n        })\r\n      );\r\n      \r\n      console.log('Web Serial devices found:', devices);\r\n      return { devices };\r\n    } catch (error) {\r\n      console.error('Error listing devices:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private getDeviceName(vendorId: number, _productId: number, index: number): string {\r\n    const vendorMap: { [key: number]: string } = {\r\n      0x10C4: 'Silicon Labs CP210x',\r\n      0x1A86: 'QinHeng CH340',\r\n      0x0403: 'FTDI',\r\n      0x303A: 'Espressif ESP32',\r\n    };\r\n    \r\n    const vendorName = vendorMap[vendorId] || 'Unknown';\r\n    return `${vendorName} (Port ${index})`;\r\n  }\r\n\r\n  async connect(options: { \r\n    deviceId: number; \r\n    serialOptions?: any \r\n  }): Promise<{ connected: boolean }> {\r\n    try {\r\n      // Get the specific port for the deviceId\r\n      if (!this.port) {\r\n        const ports = await (navigator as any).serial.getPorts();\r\n        this.port = ports[options.deviceId];\r\n      }\r\n      \r\n      if (!this.port) {\r\n        const errorMsg = `No port available for device ID ${options.deviceId}`;\r\n        this.notifyError(errorMsg);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      // Configure serial options\r\n      const serialOptions = {\r\n        baudRate: options.serialOptions?.baudRate || 115200,\r\n        dataBits: options.serialOptions?.dataBits || 8,\r\n        stopBits: options.serialOptions?.stopBits || 1,\r\n        parity: options.serialOptions?.parity || 'none',\r\n        bufferSize: 32768, // Increase buffer size for high-speed data\r\n        flowControl: 'none'\r\n      };\r\n      \r\n      console.log('Connecting with options:', serialOptions);\r\n      \r\n      await this.port.open(serialOptions);\r\n      this.connected = true;\r\n      \r\n      // Set up readable stream\r\n      const textDecoder = new TextDecoderStream();\r\n      const readableStreamClosed = this.port.readable.pipeTo(textDecoder.writable);\r\n      this.reader = textDecoder.readable.getReader();\r\n      \r\n      // Set up writable stream\r\n      const textEncoder = new TextEncoderStream();\r\n      const writableStreamClosed = textEncoder.readable.pipeTo(this.port.writable);\r\n      this.writer = textEncoder.writable.getWriter();\r\n      \r\n      // Handle stream closures\r\n      readableStreamClosed.catch(() => {\r\n        console.log('Readable stream closed');\r\n      });\r\n      \r\n      writableStreamClosed.catch(() => {\r\n        console.log('Writable stream closed');\r\n      });\r\n      \r\n      console.log('Connected to serial port successfully');\r\n      \r\n      this.notifyListeners('connectionStateChanged', { \r\n        connected: true, \r\n        deviceId: options.deviceId \r\n      });\r\n      \r\n      return { connected: true };\r\n    } catch (error) {\r\n      this.connected = false;\r\n      const errorMsg = 'Connection failed: ' + (error as Error).message;\r\n      console.error(errorMsg);\r\n      this.notifyError(errorMsg);\r\n      throw new Error(errorMsg);\r\n    }\r\n  }\r\n\r\n  async disconnect(): Promise<{ disconnected: boolean }> {\r\n    console.log('Disconnecting from serial port...');\r\n    this.listening = false;\r\n    this.connected = false;\r\n    \r\n    try {\r\n      if (this.reader) {\r\n        await this.reader.cancel();\r\n        this.reader.releaseLock();\r\n        this.reader = null;\r\n      }\r\n      \r\n      if (this.writer) {\r\n        await this.writer.close();\r\n        this.writer = null;\r\n      }\r\n      \r\n      if (this.port) {\r\n        await this.port.close();\r\n        this.port = null;\r\n      }\r\n      \r\n      this.notifyListeners('connectionStateChanged', { connected: false });\r\n      console.log('Disconnected successfully');\r\n      \r\n      return { disconnected: true };\r\n    } catch (error) {\r\n      console.error('Error during disconnect:', error);\r\n      // Still notify that we're disconnected\r\n      this.notifyListeners('connectionStateChanged', { connected: false });\r\n      return { disconnected: true };\r\n    }\r\n  }\r\n\r\n  async write(options: { data: string }): Promise<{ bytesWritten: number }> {\r\n    if (!this.writer || !this.connected) {\r\n      const errorMsg = 'Cannot write: Not connected to any device';\r\n      this.notifyError(errorMsg);\r\n      throw new Error(errorMsg);\r\n    }\r\n    \r\n    try {\r\n      await this.writer.write(options.data);\r\n      console.log('Data written to serial port:', options.data);\r\n      return { bytesWritten: options.data.length };\r\n    } catch (error) {\r\n      const errorMsg = 'Write failed: ' + (error as Error).message;\r\n      this.notifyError(errorMsg);\r\n      throw new Error(errorMsg);\r\n    }\r\n  }\r\n\r\n  async read(): Promise<{ data: string }> {\r\n    if (!this.reader || !this.connected) {\r\n      const errorMsg = 'Cannot read: Not connected to any device';\r\n      this.notifyError(errorMsg);\r\n      throw new Error(errorMsg);\r\n    }\r\n    \r\n    try {\r\n      const { value, done } = await this.reader.read();\r\n      if (done) {\r\n        throw new Error('Stream closed');\r\n      }\r\n      \r\n      return { data: value || '' };\r\n    } catch (error) {\r\n      const errorMsg = 'Read failed: ' + (error as Error).message;\r\n      this.notifyError(errorMsg);\r\n      throw new Error(errorMsg);\r\n    }\r\n  }\r\n\r\n  async startListening(): Promise<void> {\r\n    if (!this.connected) {\r\n      throw new Error('Cannot start listening: Not connected to any device');\r\n    }\r\n    \r\n    console.log('Starting listening for serial data...');\r\n    this.listening = true;\r\n    this.listenForData();\r\n  }\r\n\r\n  async stopListening(): Promise<void> {\r\n    console.log('Stopping listening for serial data...');\r\n    this.listening = false;\r\n  }\r\n\r\n  private async listenForData() {\r\n    console.log('Starting data listener for web serial...');\r\n    let buffer = '';\r\n    \r\n    while (this.listening && this.reader && this.connected) {\r\n      try {\r\n        const { value, done } = await this.reader.read();\r\n        \r\n        if (done) {\r\n          console.log('Reader stream ended');\r\n          break;\r\n        }\r\n        \r\n        if (!value) {\r\n          continue;\r\n        }\r\n        \r\n        // Accumulate data in buffer\r\n        buffer += value;\r\n        \r\n        // Process complete lines\r\n        const lines = buffer.split('\\n');\r\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\r\n        \r\n        for (const line of lines) {\r\n          if (line.trim()) {\r\n            this.processDataLine(line.trim());\r\n          }\r\n        }\r\n        \r\n        // Also process the complete buffer as hex if it looks like raw data\r\n        if (buffer.length > 0 && this.isHexData(buffer.trim())) {\r\n          this.processDataLine(buffer.trim());\r\n          buffer = '';\r\n        }\r\n        \r\n      } catch (error) {\r\n        if (this.listening) {\r\n          console.error('Read error:', error);\r\n          this.notifyError('Read error: ' + (error as Error).message);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    \r\n    console.log('Data listener stopped');\r\n  }\r\n\r\n  private processDataLine(line: string): void {\r\n    // Convert string to hex representation\r\n    const hexData = this.stringToHex(line);\r\n    \r\n    const event: DataReceivedEvent = {\r\n      data: line,\r\n      hexData: hexData,\r\n      timestamp: Date.now(),\r\n      deviceId: 0\r\n    };\r\n    \r\n    console.log('Web Serial data received:', event);\r\n    this.notifyListeners('dataReceived', event);\r\n  }\r\n\r\n  private stringToHex(str: string): string {\r\n    // If the string is already hex format, return it uppercase\r\n    if (this.isHexData(str)) {\r\n      return str.toUpperCase();\r\n    }\r\n    \r\n    // Convert string characters to hex\r\n    return Array.from(str)\r\n      .map((char: string) => char.charCodeAt(0).toString(16).padStart(2, '0'))\r\n      .join('')\r\n      .toUpperCase();\r\n  }\r\n\r\n  private isHexData(str: string): boolean {\r\n    // Check if string contains only hex characters and is reasonable length\r\n    return /^[0-9A-Fa-f\\s]+$/.test(str.replace(/\\s/g, '')) && str.replace(/\\s/g, '').length >= 4;\r\n  }\r\n\r\n  private setupSerialPortListeners(): void {\r\n    if (!('serial' in navigator)) {\r\n      console.warn('Web Serial API not available, skipping port listeners setup');\r\n      return;\r\n    }\r\n\r\n    console.log('Setting up Web Serial port listeners...');\r\n\r\n    (navigator as any).serial.addEventListener('connect', async (event: any) => {\r\n      console.log('Serial port connected:', event);\r\n      \r\n      try {\r\n        const port = event.target;\r\n        const info = port.getInfo ? port.getInfo() : {};\r\n        \r\n        const attachedEvent: DeviceAttachedEvent = {\r\n          deviceId: this.availablePorts.length, // Assign next available ID\r\n          vendorId: info.usbVendorId || 0,\r\n          productId: info.usbProductId || 0,\r\n          deviceName: this.getDeviceName(info.usbVendorId, info.usbProductId, this.availablePorts.length),\r\n          manufacturerName: info.manufacturerName,\r\n          serialNumber: info.serialNumber,\r\n        };\r\n        \r\n        this.availablePorts.push(port);\r\n        this.notifyListeners('deviceAttached', attachedEvent);\r\n        \r\n        // Auto-connect to ESP32 devices (ESP32 vendor IDs)\r\n        const esp32VendorIds = [0x10C4, 0x1A86, 0x0403, 0x303A];\r\n        if (esp32VendorIds.includes(info.usbVendorId)) {\r\n          console.log('ESP32 device detected, triggering auto-connect notification');\r\n          // Don't auto-connect here, let the service handle it\r\n        }\r\n      } catch (error) {\r\n        console.error('Error handling device attachment:', error);\r\n      }\r\n    });\r\n\r\n    (navigator as any).serial.addEventListener('disconnect', async (event: any) => {\r\n      console.log('Serial port disconnected:', event);\r\n      \r\n      try {\r\n        const port = event.target;\r\n        const portIndex = this.availablePorts.indexOf(port);\r\n        \r\n        if (portIndex >= 0) {\r\n          const detachedEvent: DeviceDetachedEvent = {\r\n            deviceId: portIndex,\r\n          };\r\n          \r\n          this.availablePorts.splice(portIndex, 1);\r\n          this.notifyListeners('deviceDetached', detachedEvent);\r\n          \r\n          // If this was our connected port, disconnect\r\n          if (this.port === port) {\r\n            console.log('Connected port was removed, disconnecting...');\r\n            await this.disconnect();\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error handling device detachment:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private notifyError(message: string): void {\r\n    const errorEvent: ErrorEvent = { message };\r\n    this.notifyListeners('error', errorEvent);\r\n  }\r\n}"]}